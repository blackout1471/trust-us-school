@startuml API class diagram

top to bottom direction

'Controllers'

class UserController{
    -_userManager{readonly} : IUserManager
    -_tokenManager : ITokenManager
    --
    +UserController(userManager : IUserManager, tokenManager : ITokenManager)
    +Create(userCreate : UserCreate) : Task<ActionResult<UserToken>>
    +Login(userLogin : UserLogin) : Task<ActionResult<UserToken>>
    +GetUserFromToken() : Task<ActionResult<User>>
    +VerificationLogin(userLogin : UserLogin) : Task<ActionResult<UserToken>>
}

'Controllers mappings' 

UserController o-- IUserManager
UserController o-- ITokenManager

'Managers'

Interface IUserManager {
    +CreateUserAsync(userCreate : UserCreate) : Task<User>
    +LoginAsync(userLogin : UserLogin, userLocation : UserLocation) : Task<User>
    +GetUserByIDAsync(id : int) : Task<User>
    +LoginWithVerificationCodeAsync(userLogin : UserLogin, userLocation : UserLocation) : Task<User>
}

interface ITokenManager {
    +GenerateUserToken(user : User) : UserToken
    +ValidateToken(token : string) : bool
    +GetUserTokenFromToken(token : string) : UserToken
}


interface IUserLocationManager {
    +IsIPLockedAsync(ip : string) : Task<bool>
    +LogLocationAsync(userLocation : UserLocation) : Task<UserLocation>
    +UserWasLoggedInFromLocationAsync(userLocation : UserLocation) : Task<bool>
}

class TokenManager {
    --
    -GetPrincipal(token : string) : ClaimsPrincipal
    -ClaimsIdentityToUserToken(identity : ClaimsPrincipal, token : string) : UserToken
}

class UserManager {
    -_userProvider : IUserProvider
    -_leakedPasswordProvider : ILeakedPasswordProvider;
    -_userLocationManager : IUserLocationManager
    -_messageService : IMessageService
    -_messageProvider : IMessageProvider
    -_logger : ILogger<UserManager>
    --
    +UserManager(userProvider : IUserProvider, leakedPasswordProvider : ILeakedPasswordProvider, userLocationManager : IUserLocationManager,
     messageService : IMessageService, messageProvider : IMessageProvider, logger : ILogger<UserManager>)
    -CheckPasswordLeakedForUser(password : string) : Task<bool>
}

class UserLocationManager {
    -_userLocationProvider : IUserLocationProvider
    --
    +UserLocationManager(userLocationProvider : UserLocationProvider)
}


'Managers mappings'

IUserManager --> UserCreate
IUserManager --> UserLogin
UserManager .-|> IUserManager

UserManager o-- IUserProvider
UserManager o-- IUserLocationManager
UserManager o-- ILeakedPasswordProvider

TokenManager .-|> ITokenManager
ITokenManager *-- UserToken


UserLocationManager .-|> IUserLocationManager
UserLocationManager o-- IUserLocationProvider
'Providers'

interface IUserProvider {
    +CreateUserAsync(userCreate : DbUser) : Task<DbUser>
    +GetUserByEmailAsync(email : string) : Task<DbUser>
    +GetUserByIdAsync(id : int) : Task<DbUser>
    +UpdateUserFailedTries(userId : int) : Task<DbUser>
    +UpdateUserLoginSuccess(userId : int) : Task<DbUser>
    +UpdateUserLoginNewLocation(userId : int) : Task<DbUser>
    +UpdateUserLoginSuccessWithVerificationCode(userId : int) : Task<DbUser>
}

interface ILeakedPasswordProvider {
    +GetIsPasswordLeakedAsync(password : string) : Task<bool>
}

class SqlProvider {
    --
    +SqlProvider(connection : string)
    {abstract}#RunSpAsync(storedProcedureName : string, storedProcedureElements : SpElements[]) : Task<DataTable>
    {abstract}#RunQueryAsync(query : string) : Task<DataTable>
}

class LeakedPasswordProvider {
    --
    +LeakedPasswordProvider(configuration : IConfiguration)
}

interface IUserLocationProvider{
    +IsIPLockedAsync(ip : string) : Task<bool>
    +LogLocationAsync(userLocation: UserLocation) : Task<UserLocation>
    +UserWasLoggedInFromLocationAsync(userLocation : UserLocation) : Task<bool>
}

class UserProvider {
    --
    +UserProvider(configuration : IConfiguration)
    -DRToUser(dr : DataRow) : DbUser
}



'Providers mappings'

IUserProvider *-- DbUser
IUserLocationProvider *-- UserLocation  

LeakedPasswordProvider .-|> ILeakedPasswordProvider
LeakedPasswordProvider --|> SqlProvider

UserProvider .-|> IUserProvider
UserProvider --|> SqlProvider

'Utility'

class Security{
    --
    {static}-GetEncryptedPassword(password : string) : string
    {static}+GetSalt(saltLength : int) : string
    {static}+GetEncryptedAndSaltedPassword(password : string, salt : string) : string
    {static}+GetHotp(key : string, counter : long) : string
    {static}+GetHmacKey() : string
    {static}+VerifyHotp(hotp : string, user : DbUser) : bool
}

class RegexHelper{
    --
    {static}+TryToGetBrowserWithoutVersion(browser : string) : string
}

'Users mappings'

User --|> UserBase
UserCreate --|> UserBase

DbUser --|> User

'User models' 

class UserToken{
    +UserID : int
    +Email : string
    +Token : string
}

class User{
    +ID : int 
    +IsVerified : bool
    +IsLocked : bool
    +FailedTries : int
    +LockedDate datetime?
}

class DbUser{
    +HashedPassword : string
    +Salt : string
    +SecretKey : string
    +Count : long
    +LastRequestDate : datetime?
}

class UserCreate {
    +Password : string
}

class UserBase{
    +Email : string
    +FirstName : string
    +LastName : string
    +PhoneNumber : string
}


class UserLogin{
    +Email : string
    +Password : string 
}

class UserLocation{
    +ID : int
    +UserID : int
    +IP : string
    +UserAgent : string
    +Successful : bool
    +CreateDate : datetime
}


@enduml