@startuml API class diagram

top to bottom direction
skinparam linetype ortho
'Controllers'

class UserController {
    -_userManager{readonly} : IUserManager
    -_tokenManager{readonly} : ITokenManager
    --
    +UserController(userManager : IUserManager, tokenManager : ITokenManager)
    +CreateAsync(userCreate : UserCreate) : Task<ActionResult>
    +LoginAsync(userLogin : UserLogin) : Task<ActionResult<UserToken>>
    +GetUserFromTokenAsync() : Task<ActionResult<User>>
    +VerificationLoginAsync(verifyCredentials : VerifyCredentials) : Task<ActionResult<UserToken>>
    +VerifyUserRegisterAsync(verifyCredentials : VerifyCredentials) : Task<ActionResult>
    -GetUserLocation() : UserLocation
}

'Controllers mappings' 

UserController "1" o-- "1" IUserManager
UserController "1" o-- "1" ITokenManager

UserController "1" --> "1" UserCreate
UserController "1" --> "1" UserLogin
UserController "1" --> "1" VerifyCredentials
UserController "1" --> "1" User
UserController "1" --> "1" UserToken
UserController "1" --> "1" UserLocation


'Managers'

Interface IUserManager {
    +CreateUserAsync(userCreate : UserCreate) : Task<bool>
    +LoginAsync(userLogin : UserLogin, userLocation : UserLocation) : Task<User>
    +GetUserByIDAsync(id : int) : Task<User>
    +LoginWithVerificationCodeAsync(verifyCredentials : VerifyCredentials, userLocation : UserLocation) : Task<User>
    +VerifyUserRegistrationAsync(verifyCredentials : VerifyCredentials, userLocation: UserLocation) : Task<bool>
}

interface ITokenManager {
    +GenerateUserToken(user : User) : UserToken
    +ValidateToken(token : string) : bool
    +GetUserTokenFromToken(token : string) : UserToken
}


interface IUserLocationManager {
    +IsIPLockedAsync(ip : string) : Task<bool>
    +LogLocationAsync(userLocation : UserLocation) : Task<UserLocation>
    +UserWasLoggedInFromLocationAsync(userLocation : UserLocation) : Task<bool>
}

interface IMessageManager {
    +SendLoginAttemptMessageAsync(to : string, otp : string) : Task<bool>
    +SendLoginRegistrationMessageAsync(to : string, key : string) : Task<bool>
}

class TokenManager {
    -_configuration{readonly} : IConfiguration
    -_logger{readonly} : ILogger<TokenManager>
    -_secret{readonly} : string
    --
    +TokenManager(configuration : IConfiguration, logger : ILogger<TokenManager>)
    -GetPrincipal(token : string) : ClaimsPrincipal
    -ClaimsIdentityToUserToken(identity : ClaimsPrincipal, token : string) : UserToken
}

class UserManager {
    -_userProvider{readonly} : IUserProvider
    -_leakedPasswordProvider{readonly} : ILeakedPasswordProvider;
    -_userLocationManager{readonly} : IUserLocationManager
    -_messageManager{readonly} : IMessageManager
    -_logger{readonly} : ILogger<UserManager>
    -_configuration{readonly} : IConfiguration
    --
    +UserManager(configuration : IConfiguration, userProvider : IUserProvider, leakedPasswordProvider : ILeakedPasswordProvider, userLocationManager : IUserLocationManager,
     messageManager : IMessageManager, logger : ILogger<UserManager>)
    -IsVerificationCodeValid(verificationCode : string, user : DbUser) : bool
    -CheckPasswordLeakedForUserAsync(password : string) : Task<bool>
    -IsUserNotVerifiedAsync(userLocation : UserLocation, user : DbUser) : Task
    -IsUserLockedAsync(userLocation : UserLocation, user : DbUser) : Task
}

class UserLocationManager {
    -_userLocationProvider{readonly} : IUserLocationProvider
    --
    +UserLocationManager(userLocationProvider : IUserLocationProvider)
}

class MessageManager {
    -_messageService{readonly} : IMessageService
    -_messageProvider{readonly} : IMessageProvider
    -_logger : ILogger<MessageManager>
    --
    +MessageManager(messageService : EmailMessageService, messageProvider : MailMessageProvider,
    logger : ILogger<MessageManager>)
}


'Managers mappings'

IUserManager "1" --> "1" UserCreate
IUserManager "1" --> "1" UserLogin
IUserManager "1" --> "1" UserLocation
IUserManager "1" --> "1" VerifyCredentials
IUserManager "1" --> "1" User
UserManager .-|> IUserManager
MessageManager .-|> IMessageManager

UserManager "1" o-- "1" IUserProvider
UserManager "1" o-- "1" IUserLocationManager
UserManager "1" o-- "1" ILeakedPasswordProvider
UserManager "1" o-- "1" IMessageManager

UserManager "1" --> "1" DbUser

TokenManager .-|> ITokenManager
ITokenManager "1" --> "1" UserToken
ITokenManager "1" --> "1" User

UserLocationManager .--|> IUserLocationManager
UserLocationManager "1" o-- "1" IUserLocationProvider
IUserLocationManager "1" --> "1" UserLocation

UserLocationManager .--|> IUserLocationManager
UserLocationManager "1" o-- "1" IUserLocationProvider
'Providers'

interface IUserProvider {
    +CreateUserAsync(userCreate : DbUser) : Task<DbUser>
    +GetUserByEmailAsync(email : string) : Task<DbUser>
    +GetUserByIdAsync(id : int) : Task<DbUser>
    +UpdateUserFailedTriesAsync(userId : int) : Task<DbUser>
    +UpdateUserLoginSuccessAsync(userId : int) : Task<DbUser>
    +UpdateUserLoginNewLocationAsync(userId : int) : Task<DbUser>
    +UpdateUserToVerifiedAsync(userID : int) : Task
    +UpdateUserLoginSuccessWithVerificationCodeAsync(userId : int) : Task<DbUser>
}

interface ILeakedPasswordProvider {
    +GetIsPasswordLeakedAsync(password : string) : Task<bool>
}

class SqlProvider {
    --
    +SqlProvider(connection : string)
    {abstract}#RunSpAsync(storedProcedureName : string, storedProcedureElements : SpElement[]) : Task<DataTable>
    {abstract}#RunQueryAsync(query : string) : Task<DataTable>
}

class LeakedPasswordProvider {
    --
    +LeakedPasswordProvider(configuration : IConfiguration)
}

interface IUserLocationProvider{
    +IsIPLockedAsync(ip : string) : Task<bool>
    +LogLocationAsync(userLocation: UserLocation) : Task<UserLocation>
    +UserWasLoggedInFromLocationAsync(userLocation : UserLocation) : Task<bool>
}

class UserProvider {
    --
    +UserProvider(configuration : IConfiguration)
    -DRToUser(dr : DataRow) : DbUser
}

class UserLocationProvider{
    -DrToUserLocation(dr : DataRow) : UserLocation
} 


'Providers mappings'

IUserProvider "1" --> "1" DbUser
IUserLocationProvider "1" --> "1" UserLocation  
UserLocationProvider .-|> IUserLocationProvider

LeakedPasswordProvider .-|> ILeakedPasswordProvider
LeakedPasswordProvider --|> SqlProvider

UserProvider .-|> IUserProvider
UserProvider --|> SqlProvider
UserLocationProvider --|> SqlProvider

SqlProvider "1" --> "*" SpElement

'Utility'

class Security{
    --
    {static}-ComputeHash(password : string) : string
    {static}-HashPassword(password : salt, salt : string) : string
    {static}+GetSalt(saltLength : int) : string
    {static}+GetEncryptedAndSaltedPassword(password : string, salt : string, pepper : string) : string
    {static}+GetHotp(key : string, counter : long) : string
    {static}+GetHmacKey() : string
}

class RegexHelper{
    --
    {static}+TryToGetBrowserWithoutVersion(browser : string) : string
}

'Models'

class SpElement{
    +Key : string,
    +Value : object,
    +ValueType : SqlDbType
}

'Users mappings'

User --|> UserBase
UserCreate --|> UserBase

DbUser --|> User

'User models' 

class UserToken{
    +UserID : int
    +Email : string
    +Token : string
}

class User{
    +ID : int 
    +IsVerified : bool
    +IsLocked : bool
    +FailedTries : int
    +LockedDate datetime?
}

class DbUser{
    +HashedPassword : string
    +Salt : string
    +SecretKey : string
    +Count : long
    +LastRequestDate : datetime?
}

class UserCreate {
    +Password : string
}

class UserBase{
    +Email : string
    +FirstName : string
    +LastName : string
    +PhoneNumber : string
}


class UserLogin{
    +Email : string
    +Password : string 
}

class VerifyCredentials {
    +Email : string
    +Password : string
}

class UserLocation{
    +ID : int
    +UserID : int
    +IP : string
    +UserAgent : string
    +Successful : bool
    +CreateDate : datetime
}


@enduml