@startuml API class diagram


top to bottom direction

'Controllers'

class UserController{
    -_logger{readonly} : ILogger<UserController>
    -_userManager{readonly} : IUserManager
    -_tokenManager : ITokenManager
    +UserController(logger : ILogger<UserController>, userManager : IUserManager, tokenManager : ITokenManager)
    
    +Create(userCreate : UserCreate) : Task<ActionResult<UserToken>>
    +Login(userLogin : UserLogin) : Task<ActionResult<UserToken>>
    +GetUserFromToken() : Task<ActionResult<User>>
}

'Controllers mappings' 

UserController o-- IUserManager
UserController o-- ITokenManager

'Managers'

interface IUserManager{
    +CreateUserAsync(userCreate : UserCreate) : Task<User>
    +LoginAsync(userLogin : UserLogin) : Task<User>
    +GetUserByIDAsync(id : int) : Task<User>
}

interface ITokenManager{
    +GenerateUserToken(user : User) : UserToken
    +ValidateToken(token : string) : bool
    +GetUserTokenFromToken(token : string) : UserToken
}

class TokenManager{
    -GetPrincipal(token : string) : ClaimsPrincipal
    -ClaimsIdentityToUserToken(identity : ClaimsPrincipal, token : string) : UserToken
}

class UserManager{
    -_userProvider : IUserProvider
    +UserManager(userProvider : IUserProvider)
}

'Managers mappings'

IUserManager --> UserCreate
IUserManager --> UserLogin
UserManager .-|> IUserManager
UserManager o-- IUserProvider

TokenManager .-|> ITokenManager
ITokenManager *-- UserToken


'Providers'

interface IUserProvider{
    +CreateUserAsync(userCreate : DbUser) : Task<DbUser>
    +GetUserByEmailAsync(email : string) : Task<DbUser>
    +GetuserByIdAsync(id : int) : Task<DbUser>
}

'Providers mappings'

IUserProvider *-- DbUser


'Utility'

class Security{
    {static}-GetEncryptedPassword(password : string) : string
    {static}+GetSalt(saltLength : int) : string
    {static}+GetEncryptedAndSaltedPassword(password : string, salt : string) : string
}


'Users mappings'

User --|> UserBase
UserCreate --|> UserBase

DbUser --|> User

'User models' 

class UserToken{
    +UserID : int
    +Email : string
    +Token : string
}

class User{
    +ID : int 
    +IsVerified : bool
    +IsLocked : bool
    +FailedTries : int
    +LockedDate datetime?
}

class DbUser{
    +HashedPassword : string
    +Salt : string
}

class UserCreate {
    +Password : string
}

class UserBase{
    +Email : string
    +FirstName : string
    +LastName : string
    +PhoneNumber : string
}


class UserLogin{
    +Email : string
    +Password : string 
}

class UserLocation{
    +ID : int
    +UserID : int
    +IP : byte[]
    +UserAgent : string
}


@enduml