@startuml Create User SD

skinparam sequence {
    GroupBorderColor red
    GroupBorderThickness 1

    ArrowColor orangered

    LifeLineBorderColor blue

    ParticipantBackgroundColor lightblue
}

actor User
participant UserController
participant UserManager
participant UserProvider
participant LeakedPasswordProvider
participant TokenManager
participant UserLocationManager
participant Security
participant MessageProvider
participant MessageService



User->UserController: Create user (email, password)
UserController->UserController: Validate password(password)

alt Password not complying
UserController-->User: Return status badrequest
end

UserController->UserManager: Create user (email, password)
UserManager->UserLocationManager: Check if ip is blocked (ipadress)
UserLocationManager-->UserManager: Returns whether ip is block

alt Ip blocked
UserManager-->UserController: Throw IPBlocked exception
UserController-->User: Return status forbidden
end


UserManager->LeakedPasswordProvider: Check is password leaked (password)
LeakedPasswordProvider-->UserManager: return boolean

alt Password Is leaked
UserManager-->UserController: Throw password leaked exception
UserController-->User: Return status forbidden
end

UserManager->UserProvider: Get user by email(email)
UserProvider-->UserManager: Return User

alt User found

UserManager-->UserController: Throw user already exists exception
UserController-->User: return status conflict

end


UserManager->Security: Get salt
Security-->UserManager: Return salt

UserManager->Security: Salt password (password, salt)
Security-->UserManager: Return salted password

UserManager->UserProvider: Save user in database (user)
UserProvider-->UserManager: Return saved user

UserManager->MessageProvider: GetRegisterMessage(email, key)
MessageProvider-->UserManager: Return message
UserManager->MessageService: Send message (message)

UserManager-->UserController: Return true
UserController-->User: Return true

@enduml